{
    "_comment": "DISFRUTA <3",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-04-28T13:55:24+02:00",
    "name": "Reflex Compatibility",
    "author": "fcocoterooo@gmail.com",
    "description": "A Reflex Compatibility (Python) Egg for Pterodactyl\r\n\r\nTested with: https:\/\/github.com\/Cocotterooo\/Web_Analand",
    "features": null,
    "docker_images": {
        "Python 3.12 & unzip": "ghcr.io/cocotterooo/docker-pterodactyl-reflex/reflex-compatibility:v3"
    },
    "file_denylist": [],
    "startup": "if [[ -d .git ]]; then git pull origin main && { if git diff --quiet; then cd /home/container/{{PY_FILE}} && echo \"cd {{PY_FILE}} 🫠\" && { if [[ -d venv ]]; then rm -rf venv; fi && python -m venv venv && source venv/bin/activate && echo \"Entorno virtual activado 🏙️\" && pip install --upgrade pip && echo \"python actualizado 🐍\" && pip install --no-cache-dir -r {{REQUIREMENTS_FILE}} && echo \"Requirements instalados 🚕\"; } else cd /home/container/{{PY_FILE}} && echo \"cd {{PY_FILE}} 🫠\" && source venv/bin/activate && echo \"Entorno virtual activado 🏙️\"; fi; } else git clone --depth 1 --single-branch -b main {{GIT_ADDRESS}}.git . && cd /home/container/{{PY_FILE}} && echo \"cd {{PY_FILE}} 🫠\" && { if [[ -d venv ]]; then rm -rf venv; fi && python -m venv venv && source venv/bin/activate && echo \"Entorno virtual activado 🏙️\" && pip install --upgrade pip && echo \"python actualizado 🐍\" && pip install --no-cache-dir -r {{REQUIREMENTS_FILE}} && echo \"Requirements instalados 🚕\"; } fi && reflex init --loglevel debug && reflex run --env prod --loglevel debug",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": \"change this part\"\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# Python App Installation Script\r\n#\r\n# Server Files: \/mnt\/server\r\napt update \r\napt-get update && apt-get install -y unzip && echo -e \"Unzip Instalado \ud83d\udfe2\ud83d\udfe2\"\r\nunzip -v\r\napt install -y git curl jq file unzip make gcc g++ libtool\r\n\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d\/ -f3-)\"\r\nfi\r\n\r\n## pull git python repo\r\nif [ \"$(ls -A \/mnt\/server)\" ]; then\r\n    echo -e \"\/mnt\/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git\/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"\/mnt\/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\nexport HOME=\/mnt\/server\r\n\r\necho \"Installing python requirements into folder\"\r\nif [[ ! -z ${PY_PACKAGES} ]]; then\r\n    pip install -U --prefix .local ${PY_PACKAGES}\r\nfi\r\n\r\nif [ -f \/mnt\/server\/requirements.txt ]; then\r\n    pip install -U --prefix .local -r ${REQUIREMENTS_FILE}\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0",
            "container": "python:3.8-slim-bookworm",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Git Repo Address",
            "description": "Git repo to clone\r\n\r\nI.E. https:\/\/github.com\/user\/repo_name",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Branch",
            "description": "What branch to pull from github.\r\n\r\nDefault is blank to pull the repo default branch",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "App py file",
            "description": "The file that starts the App.",
            "env_variable": "PY_FILE",
            "default_value": "web_app.py",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Requirements file",
            "description": "if there are other requirements files to choose from.",
            "env_variable": "REQUIREMENTS_FILE",
            "default_value": "requirements.txt",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        }
    ]
}